from sys import argv
import math

def get_grammar(filename):
    grammar={'terminals':{},'non-terminals':{}}
    with open(filename,'r') as file:
        txt=file.readlines()
        for line in txt:
            rule=[str.strip() for str in line.split(' ')]
            if rule[3][0].islower():
                if rule[1] not in grammar['non-terminals']:
                    grammar['non-terminals'][rule[1]]={}
                grammar['non-terminals'][rule[1]][rule[3]]=float(rule[0])
            else:
                if rule[1] not in grammar['terminals']:
                    grammar['terminals'][rule[1]]=[]
                term=rule[3:]
                term.append(float(rule[0]))
                grammar['terminals'][rule[1]].append(term)
    file.close()
    return grammar

def get_text(filename):
    with open(filename,'r') as file:
        txt=file.read()
    file.close()
    return txt

def cky(grammar,sentence):
    words=[word for word in sentence.split(' ') if word!='']
    n=len(words)
    table = [[{} for i in range(n+1)] for j in range(n)]
    back = [[{} for i in range(n+1)] for j in range(n)]
    for j in range(1,n+1):
        for A,rule in grammar['non-terminals'].items():
            for wj in rule:
                if wj == words[j-1]:
                    table[j-1][j][A]=rule[words[j-1]]
        for i in range(j-2,-1,-1):
            for k in range(i+1,j):
                for A,BC in grammar['terminals'].items():
                    for rule in BC:
                        B=rule[0]
                        C=rule[1]
                        Pa=rule[2]
                        b=float(table[i][k].get(B,0))
                        c=float(table[k][j].get(C,0))
                        if b>0 and c>0 :
                            p=Pa*b*c
                            if table[i][j].get(A,0)<p:
                                table[i][j][A]=p
                                back[i][j][A]=[k,B,C]


    return table,back

class Tree:
    def __init__(self,data,left,right):
        self.data=data
        self.left=left
        self.right=right
    def set_left(self,tree):
        self.left=tree
    def set_right(self,tree):
        self.right=tree
    def get_data(self):
        return self.data
    def get_left(self):
        return self.left
    def get_right(self):
        return self.right

def print_tree(tree,output,tabs=0):
    left=tree.get_left()
    right=tree.get_right()
    if left!=None and right==None:
        print('    '*tabs+tree.get_data()+' >'+left.get_data(),file=output)
        return
    print('    '*tabs+tree.get_data(),file=output)
    print_tree(left,output,tabs+1)
    print_tree(right,output,tabs+1)


def build_tree(start,end,table,back,words):
    if end-start==1:
        word=Tree(words[end-1],None,None)
        return Tree(list(table[start][end].keys())[0],word,None)
    curr=list(back[start][end].keys())[0]
    split=list(back[start][end].values())[0][0]
    tree=Tree(curr,build_tree(start,split,table,back,words),build_tree(split,end,table,back,words))
    return tree

def parse_sentence(grammar,sentence,output):
    print('Sentence: '+sentence,file=output)
    table,back=cky(grammar,sentence)
    print(table,back,file=output)
    if table[0][-1].get('S'):
        words=sentence.split(' ')
        tree=build_tree(0,len(words),table,back,words)
        print('Parsing:',file=output)
        print_tree(tree,output)
        print('Log Probability: '+str(math.log(table[0][-1]['S'])),file=output)
    else:
        print('*** This sentence is not a member of the language generated by the grammar ***',file=output)





if __name__ == '__main__':

    input_grammar = argv[1]         # The name of the file that contains the probabilistic grammar
    input_sentences = argv[2]       # The name of the file that contains the input sentences (tests)
    output_trees = argv[3]          # The name of the output file
    output=open(output_trees,'w',encoding='utf-8')
    grammar=get_grammar(input_grammar)
    print(grammar,file=output)
    sentences=get_text(input_sentences).split('\n')
    for sentence in sentences:
        parse_sentence(grammar,sentence,output)
        print('',file=output)

